package  {	import flash.display.*;	import flash.media.*;	import flash.events.*;	import flash.net.*;	import flash.errors.*;	import flash.geom.Rectangle;	import flash.media.SoundTransform;	import flash.utils.Timer;	import paella.HtmlEvent;	import paella.JavascriptInterface;	import paella.JavascriptTrace;	import paella.JavascriptInterface;	import flash.external.ExternalInterface;	import flash.system.Security;	import paella.External;		public class PlayerProgressiveDownload extends Sprite {		private var _javascriptInterface:JavascriptInterface;		private static var DEFAULT_URL:String = "http://www.mediacollege.com/video-gallery/testclips/20051210-w50s.flv";		// Video playback		private var _video:Video;		private var _netConnection:NetConnection;		private var _netStream:NetStream;		private var _soundTransform:SoundTransform;		// Flashvars variables		private var _playerId:String;		private var _url:String;		private var _autoplay:Boolean;		// Video properties		private var _duration:Number = 0;		private var _framerate:Number = 0;		private var _videoWidth:Number = 0;		private var _videoHeight:Number = 0;		private var _isPaused:Boolean = false;		private var _isEnded:Boolean = false;		private var _volume:Number = 1;		private var _isMuted:Boolean = false;		private var _isReady:Boolean = false;		private var _currentTime:Number = 0;		private var _bytesLoaded:Number = 0;		private var _bytesTotal:Number = 0;		private var _timer:Timer;		public function PlayerProgressiveDownload() {			_javascriptInterface = new JavascriptInterface();			Security.allowDomain('*');			Security.allowInsecureDomain('*');			addCallbacks();			loadFlashVars();			_javascriptInterface.playerId = _playerId;			createVideo();			setupStage();			addEventListeners();			startTimeUpdate();		}		/* External interface */		public function setTrimming(trimStart:Number,trimEnd:Number):void {		}				public function enableTrimming():void {		}				public function disableTrimming():void {		}				public function getVolume():Number {			return _volume;		}				public function setVolume(volumeValue:Number):void {			_soundTransform.volume = volumeValue;			_volume = volumeValue;			_isMuted = (_volume==0);		}		public function pauseVideo():void {			_netStream.pause();			_isPaused = true;		}				public function playVideo():void {			_netStream.resume();			_isPaused = false;		}				public function seekToTime(position:Number):void {			_currentTime = position;			_netStream.seek(position);			sendEvent(HtmlEvent.SEEKING);			sendEvent(HtmlEvent.TIMEUPDATE);		}				public function seekTo(percent:Number):void {			var time:Number = percent * getDuration() / 100;			seekToTime(time);		}				public function getCurrentTime():Number {			return _currentTime;		}				public function getDuration():Number {			return _duration;		}				public function isReady():Boolean {			return _isReady;		}				public function getWidth():Number {			return _videoWidth;		}				public function getHeight():Number {			return _videoHeight;		}				public function timeUpdate(event:Event):void {			_currentTime = _netStream.time			if (!_isPaused) {				sendEvent(HtmlEvent.TIMEUPDATE);								if (_currentTime>=_duration - 1.0) {					endVideo();				}			}						if (_bytesLoaded < _bytesTotal) {				sendEvent(HtmlEvent.PROGRESS);			}		}		public function currentProgress():Number {			return Math.round(_netStream.bytesLoaded/_netStream.bytesTotal*100);		}		/*   Events    */		public function onMetadata(data:Object):void {			_duration = data.duration;			_framerate = data.framerate;			_videoWidth = data.width;			_videoHeight = data.height;			_bytesTotal = _netStream.bytesTotal;			sendEvent(HtmlEvent.LOADEDDATA);			sendEvent(HtmlEvent.CANPLAY);			sendEvent(HtmlEvent.PROGRESS);			sendEvent(HtmlEvent.TIMEUPDATE);			if (!_autoplay) {				_netStream.pause();				_isPaused = true;			}			else {				_isPaused = false;			}					_isReady = true;		}		public function onResize(event:Event):void {			resizeVideo();		}		private function onNetStatus(event:NetStatusEvent):void {			if (event.info.code == 'NetStream.Play.Stop') {				endVideo();			}		}		/*       Private functions      */		private function endVideo():void {			_currentTime = 0;			_isEnded = true;			_isPaused = true;			_netStream.seek(_currentTime);			_netStream.resume();			_netStream.pause();			sendEvent(HtmlEvent.TIMEUPDATE);			sendEvent(HtmlEvent.ENDED);		}				private function createVideo():void {			_video = new Video();			_video.smoothing = true;			_netConnection = new NetConnection();			_netConnection.connect(null);			_netStream = new NetStream(_netConnection);			_soundTransform = new SoundTransform(1.0);						_netStream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);			addChild(_video);			_video.x = 0;			_video.y = 0;			resizeVideo();			var client:Object = new Object();			_netStream.client = client;			client.onMetaData = onMetadata;			_video.attachNetStream(_netStream);			_netStream.play(_url);		}		private function setupStage():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.displayState = StageDisplayState.NORMAL;		}		private function addEventListeners():void {			stage.addEventListener(Event.RESIZE, onResize);		}		private function addCallbacks():void {			paella.External.addCallback("log",paella.JavascriptTrace.log);			paella.External.addCallback("error",paella.JavascriptTrace.error);			paella.External.addCallback("warning",paella.JavascriptTrace.warning);			paella.External.addCallback("debug",paella.JavascriptTrace.debug);			paella.External.addCallback("pause",this.pauseVideo);			paella.External.addCallback("play",this.playVideo);			paella.External.addCallback("seekToTime",this.seekToTime);			paella.External.addCallback("seekTo",this.seekTo);			paella.External.addCallback("isReady",this.isReady);			paella.External.addCallback("duration",this.getDuration);			paella.External.addCallback("getCurrentTime",this.getCurrentTime);			paella.External.addCallback("getWidth",this.getWidth);			paella.External.addCallback("getHeight",this.getHeight);			paella.External.addCallback("getVolume",this.getVolume);			paella.External.addCallback("setVolume",this.setVolume);			paella.External.addCallback("currentProgress",this.currentProgress);			paella.External.addCallback("setTrimming",this.setTrimming);			paella.External.addCallback("enableTrimming",this.enableTrimming);			paella.External.addCallback("disableTrimming",this.disableTrimming);		}		private function loadFlashVars():void {			 _playerId = stage.loaderInfo.parameters.playerId===undefined ? "":stage.loaderInfo.parameters.playerId;			 _url = stage.loaderInfo.parameters.url===undefined ? DEFAULT_URL:stage.loaderInfo.parameters.url;			 _autoplay = stage.loaderInfo.parameters.autoplay=="true" ? true:false;		}		private function resizeVideo():void {			_video.width = stage.stageWidth;			_video.height = stage.stageHeight;		}				private function updateVideoData():void {			_bytesLoaded = _netStream.bytesLoaded;		}				private function startTimeUpdate():void {			_timer = new Timer(200);			_timer.addEventListener("timer",timeUpdate);			_timer.start();		}		private function sendEvent(eventName:String):void {			// calculate this to mimic HTML5			updateVideoData();			var bufferedTime:Number = _bytesLoaded / _bytesTotal * _duration;			JavascriptTrace.debug(eventName + " - buffered time: " + bufferedTime + ", current time: " + getCurrentTime());			// build JSON			var values:String =				"duration:" + _duration +				",framerate:" + _framerate +				",currentTime:" + getCurrentTime() +				",muted:" + _isMuted +				",paused:" + _isPaused +				",ended:" + _isEnded +				",volume:" + _volume +				",src:\"" + _url + "\"" +				",bytesTotal:" + _bytesTotal +				",bufferedBytes:" + _bytesLoaded +				",bufferedTime:" + bufferedTime +				",videoWidth:" + _videoWidth +				",videoHeight:" + _videoHeight +				"";			_javascriptInterface.sendEvent(eventName, values);		}	}	}