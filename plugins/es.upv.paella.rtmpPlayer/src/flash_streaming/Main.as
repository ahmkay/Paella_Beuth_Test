package  {	import flash.display.*;	import flash.media.*;	import flash.events.*;	import flash.net.*;	import flash.errors.*;	import flash.external.ExternalInterface;		public class Main extends Sprite {		var connection:NetConnection;		var video:Video;		var stream:NetStream;		var metadataReady:Boolean = false;		var streamReady:Boolean = false;		var videoDuration:Number = 0;		var currentVolume:Number = 1;		var audioTransform:SoundTransform;		var trimStart:Number;		var trimEnd:Number;		var trimEnabled:Boolean = false;		var trimRect:Shape;		var doneEventCalled = false;		var liveStream = false;		var defaultBufferTime = 5;			public function Main() {			ExternalInterface.addCallback("pause",this.pauseVideo);			ExternalInterface.addCallback("play",this.playVideo);			ExternalInterface.addCallback("seekToTime",this.seekToTime);			ExternalInterface.addCallback("seekTo",this.seekTo);			ExternalInterface.addCallback("isReady",this.isReady);			ExternalInterface.addCallback("duration",this.getDuration);			ExternalInterface.addCallback("getCurrentTime",this.getCurrentTime);			ExternalInterface.addCallback("getWidth",this.getWidth);			ExternalInterface.addCallback("getHeight",this.getHeight);			ExternalInterface.addCallback("getVolume",this.getVolume);			ExternalInterface.addCallback("setVolume",this.setVolume);			ExternalInterface.addCallback("setTrimming",this.setTrimming);			ExternalInterface.addCallback("enableTrimming",this.enableTrimming);			ExternalInterface.addCallback("disableTrimming",this.disableTrimming);						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			connection = new NetConnection();			connection.addEventListener(NetStatusEvent.NET_STATUS, onEvent);			connection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onError);			connection.addEventListener(IOErrorEvent.IO_ERROR, onError);			stage.addEventListener(Event.RESIZE, onResize);			stage.addEventListener(Event.ENTER_FRAME, timeUpdate);			connection.client = this;						this.liveStream = stage.loaderInfo.parameters.isLiveStream=="true";			if (stage.loaderInfo.parameters.bufferTime)				this.defaultBufferTime = Number(stage.loaderInfo.parameters.bufferTime);			var connect = stage.loaderInfo.parameters.connect;			if (connect!=null) {				connect = connect.toString();				//ExternalInterface.call("console.log","conecting to " + connect);				connection.connect(connect);			}			else {				connection.connect(null);				createNetStream();			}		}				public function setTrimming(trimStart:Number,trimEnd:Number):void {			this.trimStart = trimStart;			this.trimEnd = trimEnd;		}				public function enableTrimming():void {			trimEnabled = true;		}				public function disableTrimming():void {			trimEnabled = false;		}				public function getVolume():Number {			return this.currentVolume;		}				public function setVolume(volumeValue:Number):void {			this.currentVolume = volumeValue;		}		public function pauseVideo():void {			if (!this.liveStream) {				stream.pause();			}		}				public function playVideo():void {			if (!this.liveStream) {				stream.resume();			}			resizeVideo();		}				public function seekToTime(position:Number):void {			if (!this.liveStream) {				stream.seek(position);			}		}				public function seekTo(percent:Number):void {			if (!this.liveStream) {				var time:Number = percent * getDuration() / 100;				stream.seek(time);			}		}				public function getCurrentTime():Number {			if (this.streamReady) {				return stream.time;			}			else {				return 0;			}		}				public function getDuration():Number {			return videoDuration;		}				public function isReady():Boolean {			return this.metadataReady && this.streamReady;		}				public function getWidth():Number {			return video.videoWidth;		}				public function getHeight():Number {			return video.videoHeight;		}				public function createNetStream():void {			stream = new NetStream(connection);			stream.bufferTime = this.defaultBufferTime;			audioTransform = new SoundTransform();			stream.soundTransform = audioTransform;			stream.client = this;			video = new Video(stage.stageWidth, stage.stageHeight);			video.attachNetStream(stream);			stream.play(stage.loaderInfo.parameters.url);			addChild(video);			streamReady = true;			pauseVideo();			stream.seek(0);			callDoneEvent();		}				public function onBWDone() {		}				protected function callDoneEvent() {			if (!doneEventCalled) {				var id = stage.loaderInfo.parameters.playerId;				ExternalInterface.call("paella_flash_video_ready",id);				doneEventCalled = true;			}		}				public function clearTrimRect():void {			if (this.trimRect!=null) {				this.removeChild(this.trimRect);				this.trimRect = null;			}		}				public function drawTrimRect():void {			clearTrimRect();			this.trimRect = new Shape();			this.trimRect.graphics.beginFill(0x000000);			this.trimRect.graphics.drawRect(this.video.x,this.video.y,this.video.width,this.video.height);			this.trimRect.graphics.endFill();			this.addChild(this.trimRect);		}		public function timeUpdate(event:Event):void {			if (trimEnabled && (getCurrentTime()<this.trimStart || getCurrentTime()>this.trimEnd)) {				drawTrimRect();				audioTransform = new SoundTransform(0);				stream.soundTransform = audioTransform;			}			else {				clearTrimRect();				audioTransform = new SoundTransform(this.currentVolume);				stream.soundTransform = audioTransform;			}		}		public function onError(event:Event):void {			//ExternalInterface.call("alert","Streaming error");		}			public function onEvent(event:NetStatusEvent):void {			if (event.info.code=="NetConnection.Connect.Success" && connection.connected && !this.streamReady) {				//ExternalInterface.call("console.log","connection received");				createNetStream();			}		}				public function onMetaData(info:Object):void {			for (var key in info) {				if (key=="duration") {					this.videoDuration = info[key];					this.metadataReady = true;					break;				}			}		}				protected function resizeVideo():void {			video.width = stage.stageWidth;			video.height = stage.stageHeight;/*			if (this.streamReady) {				var videoAspect:Number = video.videoWidth/video.videoHeight;				var stageAspect:Number = stage.stageWidth/stage.stageHeight;				if (videoAspect>stageAspect) {	// Portrail					video.width = stage.stageWidth;					video.height = video.width / videoAspect;					//video.y = stage.stageHeight / 2 - video.height / 2;				}				else {	// Landscape					video.height = stage.stageHeight;					video.width = video.height * videoAspect;					//video.x = stage.stageWidth / 2 - video.width / 2;				}			}*/		}				public function onResize(event:Event):void {			resizeVideo();		}				public function onCuePoint(info:Object):void {					}				public function onXMPData(data:Object):void {					}	}	}