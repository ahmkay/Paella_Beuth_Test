package paella {	import flash.display.Sprite;import flash.events.*;import paella.DynamicNetStream;import flash.net.NetConnection;import flash.net.NetStream;import flash.media.Video;import flash.media.SoundTransform;import flash.utils.Timer;public class VideoElement extends Sprite implements IMediaElement {	private var _javascriptInterface:JavascriptInterface;		private var _server:String = "";	private var _stream:String = "";	private var _autoplay:Boolean = true;		private var _netConnection:NetConnection;	private var _netStream:NetStream;	private var _video:Video;	private var _soundTransform:SoundTransform;	private var _oldVolume:Number = 1;	private var retryTimer:Timer = null;	private var _subscribe:Boolean = false;	private var _ready:Boolean = false;		// event values    private var _duration:Number = 0;    private var _framerate:Number;    private var _isPaused:Boolean = true;    private var _isEnded:Boolean = false;    private var _volume:Number = 1;    private var _isMuted:Boolean = false;	private var _bufferTime:Number = 1;    private var _bytesLoaded:Number = 0;    private var _bytesTotal:Number = 0;    private var _bufferedTime:Number = 0;    private var _bufferEmpty:Boolean = false;    private var _bufferingChanged:Boolean = false;    private var _seekOffset:Number = 0;    private var _videoWidth:Number = -1;    private var _videoHeight:Number = -1;    private var _timer:Timer;    private var _parentReference:Object;	    public function setReference(arg:Object):void { _parentReference = arg; }	public function setSize(width:Number, height:Number):void { _video.width = width; _video.height = height; } 	public function get video():Video { return _video; }	public function get videoHeight():Number { return _videoHeight; }	public function get videoWidth():Number { return _videoWidth; }	public function duration():Number { return _duration; }		public function currentProgress():Number {		if(_netStream != null) {			return Math.round(_netStream.bytesLoaded/_netStream.bytesTotal*100);	    } else {			return 0;	    }	}		public function currentTime():Number {		var currentTime:Number = 0;	    if (_netStream != null) {			currentTime = _netStream.time;		}	    return currentTime;	}    public function VideoElement(jsInterface:JavascriptInterface, server:String, stream:String, subscribe:Boolean, autoplay:Boolean, startVolume:Number, bufferTime:Number) {		_javascriptInterface = jsInterface;		_bufferTime = bufferTime;				_autoplay = autoplay;		_volume = startVolume;		_isMuted = _volume==0;		_video = new Video();		_video.smoothing = true;		addChild(_video);		_server = server;		_stream = stream;		_subscribe = subscribe;		_netConnection = new NetConnection();		_netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);		_netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);		_netConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);				var rtnClient:Object = new Object();		rtnClient.onFCSubscribe = function (info:Object):void {			if (info.code == "NetStream.Play.StreamNotFound") {				JavascriptTrace.error("Could not play stream " + _stream);			}			else if (info.code == "NetStream.Play.Start") {				createNetStream();			}		};				rtnClient.onBWDone = function():void { };				_netConnection.client = rtnClient;		_timer = new Timer(150);		_timer.addEventListener("timer", timerHandler);		_timer.start();				connect();    }		protected function connect():void {		_netConnection.connect(_server);	}		public function set bufferTime(time:Number):void {		_bufferTime = time;	}		public function get bufferTime():Number {		return _bufferTime;	}		private function timerHandler(e:TimerEvent):void {		if (_netStream) {			if (!_isPaused) {				JavascriptTrace.debug("Timeupdate: " + _netStream.time);				sendEvent(HtmlEvent.TIMEUPDATE);			}			_bufferedTime = _netStream.bytesLoaded;			_bytesLoaded = _netStream.bytesLoaded;		    _bytesTotal = _netStream.bytesTotal;		    if (_bytesLoaded < _bytesTotal) {		    	sendEvent(HtmlEvent.PROGRESS);		    }		}	}		private function netStatusHandler(event:NetStatusEvent):void {		switch (event.info.code) {			case "NetStream.Buffer.Empty":				_bufferEmpty = true;				stop();				_isEnded ? sendEvent(HtmlEvent.ENDED) : null;				break;			case "NetStream.Buffer.Full":				_bytesLoaded = _netStream.bytesLoaded;				_bytesTotal = _netStream.bytesTotal;				_bufferEmpty = false;				sendEvent(HtmlEvent.PROGRESS);				break;			case "NetConnection.Connect.Success":				if (_subscribe) {					fcSubscribeRetry();				}				else {					createNetStream();				}				break;			case "NetStream.Play.StreamNotFound":				JavascriptTrace.error("Unable to locate video");				break;		}	}		private function fcSubscribeRetry():void {		retryTimer = new Timer(100,3);		retryTimer.addEventListener(TimerEvent.TIMER_COMPLETE,retryFCSubscribe);		retryTimer.start();	}		private function retryFCSubscribe(event:TimerEvent):void {		_netConnection.call("FCSubscribe", null, _stream);	}		private function securityErrorHandler(event:SecurityErrorEvent):void {		JavascriptTrace.error("Security error: " + event);	}	private function asyncErrorHandler(event:AsyncErrorEvent):void {		JavascriptTrace.error("Async error: " + event);	}		public function metaDataHandler(info:Object):void {		if (!_ready) {			if (_autoplay) {				_isPaused = false;			}			else {				_netStream.pause();				_isPaused = true;			}			_ready = true;		}		JavascriptTrace.debug("Metadata loaded");		_duration = info.duration;	    _framerate = info.framerate;	    _videoWidth = info.width;	    _videoHeight = info.height;	    // set size?		sendEvent(HtmlEvent.LOADEDDATA);		sendEvent(HtmlEvent.CANPLAY);	    sendEvent(HtmlEvent.LOADEDMETADATA);		sendEvent(HtmlEvent.PROGRESS);		sendEvent(HtmlEvent.TIMEUPDATE);	}		public function cuePointHandler(info:Object):void {			}			protected function createNetStream() {		if (_netConnection.connected) {			JavascriptTrace.debug("Connected");			_netStream = new DynamicNetStream(_netConnection);			_netStream.bufferTime = _bufferTime;			_netStream.onMetaData = metaDataHandler;			_netStream.onCuePoint = cuePointHandler;			_netStream.play(_stream);			_video.attachNetStream(_netStream);			if (retryTimer) retryTimer.stop();			_soundTransform = new SoundTransform(_volume);			_netStream.soundTransform = _soundTransform;		}	}		public function play():void {		if (_netStream) {			_netStream.resume();			sendEvent(HtmlEvent.PLAY);		}	}		public function pause():void {		if (_netStream) {			_netStream.pause();			_isPaused = true;			sendEvent(HtmlEvent.PAUSE);		}	}		public function stop():void {		JavascriptTrace.debug("Stop");	    if (_netStream) {			_netStream.seek(0);			_netStream.pause();			_isPaused = true;			sendEvent(HtmlEvent.STOP);		}	}		public function setCurrentTime(pos:Number):void {		if (_netStream) {			_netStream.seek(pos);			sendEvent(HtmlEvent.SEEKING);		}	}		public function setVolume(volume:Number):void {		if (_netStream) {			_soundTransform = new SoundTransform(volume);			_netStream.soundTransform = _soundTransform;		}		_volume = volume;		_isMuted = (_volume == 0);		sendEvent(HtmlEvent.VOLUMECHANGE);	}		public function getVolume():Number {	    if(_isMuted) {	     	return 0;	    }		else {	    	return _volume;	    }	}		public function setMuted(muted:Boolean):void {		if (_isMuted == muted)			return;		if (muted) {			_oldVolume = (_netStream == null) ? _oldVolume : _netStream.soundTransform.volume;			setVolume(0);		}		else {			setVolume(_oldVolume);		}		_isMuted = muted;	}		private function sendEvent(eventName:String):void {		// calculate this to mimic HTML5		_bufferedTime = _bytesLoaded / _bytesTotal * _duration;		JavascriptTrace.debug(eventName + " - buffered time: " + _bufferedTime + ", current time: " + currentTime());		// build JSON		var values:String =			"duration:" + _duration +			",framerate:" + _framerate +			",currentTime:" + currentTime() +			",muted:" + _isMuted +			",paused:" + _isPaused +			",ended:" + _isEnded +			",volume:" + _volume +			",server:\"" + _server + "\"" +			",stream:\"" + _stream + "\"" +			",bytesTotal:" + _bytesTotal +			",bufferedBytes:" + _bytesLoaded +			",bufferedTime:" + _bufferedTime +			",videoWidth:" + _videoWidth +			",videoHeight:" + _videoHeight +			"";		_javascriptInterface.sendEvent(eventName, values);	}}}